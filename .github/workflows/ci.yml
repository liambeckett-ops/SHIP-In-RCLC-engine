name: Solvine Systems CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_unified.txt
        pip install pytest black flake8
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check .
    
    - name: Validate configuration
      run: |
        python main_unified.py --validate-config
    
    - name: Test Jasper head agent
      run: |
        python main_unified.py --jasper-test
    
    - name: Check system status
      run: |
        python main_unified.py --status
    
    - name: Run tests with pytest
      run: |
        pytest tests/ -v
    
    - name: Test CLI basic functionality
      run: |
        echo "Testing CLI help"
        python main_unified.py --help
        echo "Testing single message mode"
        python main_unified.py --cli --local --message "Test message" || echo "CLI test completed"

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security scan with bandit
      run: |
        bandit -r . -x tests/
    
    - name: Check dependencies for vulnerabilities
      run: |
        safety check
